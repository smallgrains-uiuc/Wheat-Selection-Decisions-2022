load("/Users/jrut/Documents/Teaching/CPSC554/2022/Exam 4/Exam 4 Data.RData")
ls()
load("/Users/jrut/Documents/Teaching/CPSC554/2022/Exam 4/Exam 4 Data.RData")
ls()
head(marginal_means)
M[1:5, 1:5]
head(map)
dim(map
)
dim(M)
row.names(map)<- colnames(M)
head(tbv)
dim(tbv)
dim(emmean)
dim(marginal_means)
marginal_means$emmean
head(tbv)
head(marginal_means)
match(marginal_means$phenoGID, tbv$phenoGID)
tbv[match(marginal_means$phenoGID, tbv$phenoGID),]
tbv[match(marginal_means$phenoGID, tbv$phenoGID),'tbv']
gvec<- tbv[match(marginal_means$phenoGID, tbv$phenoGID),'tbv']
var(gvec)
var(gvec)/ (var(gvec)+ 1)
var(gvec)/ [(var(gvec)+ 1)]
var(gvec)/ (var(gvec)+ 1))
var(gvec)/(var(gvec)+ 1))
var(gvec)/(var(gvec)+ 1)
var(gvec)/(var(gvec)+ 4)
var(gvec)/(var(gvec)+ 3)
sqrt(3)
rnorm(length(gvec), sd=1.73)
errvec<- rnorm(length(gvec), sd=1.73)
pvec<- gvec+errvec
cor(pvec, marginal_means$emmean)
marginal_means$emmean<- pvec
ls()
rm(errvec)
rm(gvec)
rm(ped)
rm(pheno)
rm(pvec)
ls()
trueMrkeffs
tbv
ls()
head(marginal_means)
head(map)
M[1:5, 1:5]
save.image("/Users/jrut/Documents/Teaching/CPSC554/2022/Exam 4/Exam 4 Data.RData")
dim(M)
dim(marginal_means)
load("/Users/jrut/Documents/Teaching/CPSC554/2022/Exam 3/Exam3Data 2022.RData")
load("/Users/jrut/Documents/Teaching/CPSC554/2022/Exam 3/Exam3Data 2022.RData")
library(lme4)
library(rrBLUP)
library(pedigreemm)
library(arm)
ls()
head(pheno)
pheno$se
pheno$env
dat<- read.csv("~/Documents/Wheat/2021/Data Upload Files/check urbana yield trial data/Maxwell2021_mirusfile_curated.csv", as.is=TRUE)
head(dat)
adv<- dat[which(dat$X.studyName. == 'Adv_Urb_21'),]
head(adv)
mf<- (100-dat$Moisture)/(100-13.5)
dat$WeightAdj<- dat$Weight*mf
pltsizeIn<- 51*108
pltsizeAc<- pltsizeIn/6272640
dat$buperacre<- (dat$WeightAdj/60)/pltsizeAc
library(lme4)
library(arm)
dat$X.blockNumber.<- as.character(dat$X.blockNumber.)
adv<- dat[which(dat$X.studyName. == 'Adv_Urb_21'),]
adv
is.na(adv$buperacre)
which(!is.na(adv$buperacre))
adv<- adv[which(!is.na(adv$buperacre)),]
head(adv)
mod<- lmer(buperacre~1+(1|X.germplasmName.)+(1|X.blockNumber.), adv)
summary(mod)
str(summary(mod))
summary(mod)$varcor
summary(mod)$varcor
as.data.frame(summary(mod)$varcor)
str(summary(mod)$varcor)
vc<- as.data.frame(summary(mod)$varcor)
vc
Vg<- vc[1,'vcov']
Vg
Verror<- vc[3,'vcov']
Verror
ranef(mod)$X.germplasmName.
blups<- ranef(mod)$X.germplasmName.
ranef(mod)
<- ranef(mod)$X.germplasmName.
blups
str(blups)
hist(blups)
hist(blups[,1])
order(blups[,1])
blups[order(blups[,1]),]
names<- row.names(blups)
blups<- blups[,1]
blups
names(blups)<- names
blups
sort(blups)
fixef(mod)
mean(c(11.77113142, 7.35383228, 8.09137208))
se.ranef(mod)$X.germplasmName.
pev<0 se.ranef(mod)$X.germplasmName.^2
pev<- se.ranef(mod)$X.germplasmName.^2
pev
pev[,1]
pev[,1]
pev<- pev[,1]
rel<- 1-pev/Vg
rel
Vg/(Vg+Verror/2)
load("/Users/jrut/Library/CloudStorage/Box-Box/UIUC_SQW_Breeding_Workshop/Jessica- Day 1 presentations/PM2 Exercise/Breeding Population Data.RData")
ls()
load("/Users/jrut/Library/CloudStorage/Box-Box/UIUC_SQW_Breeding_Workshop/Jessica- Day 1 presentations/PM2 Exercise/Breeding Population Data.RData")
ls()
head(pheno)
tail(pheno)
pheno$loc
ls()
head(marginal_means)
tail(marginal_means)
head(pheno)
tail(marginal_means)
ls()
head(tbv)
tail(tbv)
M[1:10, 1:10]
dim(M)
pheno$env<- paste(pheno$loc, pheno$year, sep="_")
library(lme4)
library(lme4)
mod_iid<- lmer(pValue=1+loc+(1|phenoGID), data=pheno,
subset= which(pheno$year=='2'))
mod_iid<- lmer(pValue~1+loc+(1|phenoGID), data=pheno,
subset= which(pheno$year=='2'))
rslt<- ranef(mod_iid)$phenoGID
head(rslt)
rslt<- data.frame(phenoGID= row.names(rslt), blup=rslt[,1])
head(rslt)
rslt<- data.frame(phenoGID= row.names(rslt), blup_iid=rslt[,1])
rslt[order(rslt$blup_iid, decreasing=TRUE), ][1:10,]
rslt<- ranef(mod_iid)$phenoGID
rslt<- data.frame(phenoGID= row.names(rslt), blup_iid=rslt[,1])
rslt[order(rslt$blup_iid, decreasing=TRUE), ][1:10,]
#compute reliability
library(arm)
se_blupiid<- se.ranef(mod_iid)$phenoGID
vcomp<- data.frame(VarCorr(mod_iid))
vcomp
Vg<- vcomp[vcomp$grp=='phenoGID', 'vcov']
pev<- se_blupiid^2
rel<- 1-pev/Vg
rel
se_blupiid
se_blupiid^2
pev
rel<- 1-pev/Vg
sel_acc<- sqrt(rel)
sel_acc
#Genomic BLUP
Msub<- M[levels(pheno$phenoGID),]
library(rrBLUP)
Gsub<- A.mat(Msub)
G[1:5, 1:5]
Gsub[1:5, 1:5]
#Design matrices
X<- model.matrix(pValue~1+env, data=pheno)
head(X)
View(X)
Z<- model.matrix(pValue~0+phenoGID, data=pheno)
y<- pheno$pValue
head(pheno)
head(pheno)
plot(pheno$se)
#Pre- multiplied design matrices
X2<- X/pheno$se
#Pre- multiplied design matrices
X2<- X/pheno$se
y2<- y/pheno$se
X2<- Z/pheno$se
#Pre- multiplied design matrices
X2<- X/pheno$se
y2<- y/pheno$se
Z2<- Z/pheno$se
#fit model
mod<- mixed.solve(y2, Z2, Gsub, X2)
str(mod)
str(mod)
rsltGBLUP<- data.frame(phenoGID= names(mod$u), blup_GBLUP=mod$u)
head(rslt(BLUP))
head(rsltGBLUP)
#combine results
bluprslt<- merge(rsltGBLUP, rslt, by='phenoGID')
head(bluprslt)
#combine results
bluprslt<- merge(rsltGBLUP, rslt, by='phenoGID', all.x=TRUE)
head(bluprslt)
#combine with tbv
allbv<- merge(bluprslt, tbv, by='phenoGID')
head(allbv)
cor(na.omit(allbv[,-1]))
setwd("~/Documents/GitHub/Wheat-Selection-Decisions-2022")
library(asreml)
library(reshape)
library(gaston)
library(rrBLUP)
all<- read.csv('ILTrainingSetPhenotypesJuly.21.2022.csv', row.names=1)
#make converge
mkConv<- function(mod){
pctchg<- summary(mod)$varcomp[,c('%ch')]
while(any(pctchg >1, na.rm=TRUE)){
mod<-suppressWarnings(update(mod))
pctchg<- summary(mod)$varcomp[,c('%ch')]
}
return(mod)
}
#get data from 2020 to 2022
allsub<- droplevels.data.frame(all[which(all$year>19),])
#change year to a factor
allsub$year<- as.factor(as.character(allsub$year))
######################################
##Factor analytic model for yield
######################################
allsub$trait<- gsub("North.", "", allsub$trait)
allsub$trait<- gsub("South.", "", allsub$trait)
allsub2<- droplevels.data.frame(allsub[which(allsub$trait %in% 'Grain.yield...bu.ac'),])
#Exclude Adv 2020 data
allsub2<- allsub2[-which(allsub2$study %in% c('Adv_Urb_20','Adv_StJ_20','Adv_Car_20','Adv_Neo_20', 'Pr_Neo_21', 'Pr_Urb_21', 'Pr_Stj_21', 'AdvHY_Urb_20')),]
#include only the lines in all locations
s4lines<- read.csv('s4lines22Notes.csv', row.names=1)[,1]
s4lines<- s4lines[-1]
allsub2<- allsub2[which(allsub2$germplasmName %in% s4lines),]
#cast and melt data to include missing data
q<- melt(cast(allsub2, site+loc+year+study+germplasmName~trait, value='predicted.value'),
variable_name='trait',
id.vars=c('site','loc','year','study','germplasmName'), na.rm=FALSE)
q2<- melt(cast(allsub2, site+loc+year+study+germplasmName~trait, value='wt'),
variable_name='trait',
id.vars=c('site','loc','year','study','germplasmName'), na.rm=FALSE)
allsub3<- merge(q, q2, by=c('site','loc','year','study','germplasmName', 'trait'),
all.x=TRUE, all.y=TRUE)
#convert variables to factors
ix<- which(colnames(allsub3) %in%c('site','loc','year','study','germplasmName', 'trait'))
for(i in ix){
allsub3[,i ]<- as.factor(as.character(allsub3[, i]))
}
#change NA weights to 0
if(length(which(is.na(allsub3$value.y)))>0){
allsub3[which(is.na(allsub3$value.y)),'value.y']<- 0
}
#is a reliability estimate needed
relNeeded<- FALSE
#change Stj 22 to Addieville
allsub3$study<- as.character(allsub3$study)
allsub3$site<- as.character(allsub3$site)
allsub3$loc<- as.character(allsub3$loc)
allsub3[which(allsub3$study == 'YT_Stj_22'),'site']<- 'Add_22'
allsub3[which(allsub3$study == 'YT_Stj_22'),'loc']<- 'Add'
allsub3[which(allsub3$study == 'YT_Stj_22'),'study']<- 'YT_Add_22'
allsub3$study<- as.factor(allsub3$study)
allsub3$site<- as.factor(allsub3$site)
allsub3$loc<- as.factor(allsub3$loc)
#factor analytic model without the relationship matrix
mod<- asreml(fixed=value.x~1,
random=~site+fa(site, 2):germplasmName,
weights=value.y, data=allsub3,
na.action = na.method(y='include', x='include'),
family=asr_gaussian(dispersion = 1), workspace=64e6)
mod<- mkConv(mod)
#site correlation matrox
met.corr <-function(object,site,faN=2){ # ,faRS=1
n<-nlevels(site)
varcomp<-summary(object)$varcomp['component']
vcn<-row.names(varcomp)
aimn<-vcn[grep('fa\\(.*,.*\\)',vcn)]
varcomp1<-varcomp[aimn,]
vect1<-varcomp1[1:n]
w.var<-diag(vect1)
vect2<-varcomp1[(n+1):((1+faN)*n)]
L.var<-matrix(vect2,nrow=n)
wL.var<-L.var%*%t(L.var)+w.var
df<-wL.var
for(i in 1:(n-1)){
for(j in 2:n){
if(i<j){df[i,j]<-df[j,i]/(sqrt(df[i,i]*df[j,j]))
j<-j+1}
}
i<-i+1
}
rownames(df)<-levels(site)
colnames(df)<-levels(site)
df.2<-df
for(i in 1:(n-1)){
for(j in 2:n){
if(i<j){df[j,i]<-df[i,j]
j<-j+1}
}
i<-i+1
}
diag(df)<-1
return(df)
}
df<- met.corr(mod, unique(allsub3$site, 2))
heatmap(df)
df<- round(df, 2)
stord<- c('Blv_22','War_22', 'Msn_22', 'Blk_22', 'Lex_22', 'Add_22','Neo_22','Stp_22','Urb_22','Stj_21','Neo_21','Urb_21','Urb_20','Stj_20','Car_20','Neo_20')
write.csv(df[stord, stord], 'siteCorrelations.csv')
faBlups<- predict(mod, classify='germplasmName:site', pworkspace="4gb")$pvals
faBlups$predicted.value<- round(faBlups$predicted.value, 2)
faBlups_smry<- cast(faBlups, germplasmName~site, value='predicted.value')
faBlups_smry<- faBlups_smry[,c('germplasmName', colnames(faBlups_smry)[order(colMeans(faBlups_smry[,-1]))+1])]
AvgYld<- rowMeans(faBlups_smry[,-c(1, 3)])
faBlups_smry<- cbind(faBlups_smry, AvgYld)
write.csv(faBlups_smry, file='faBlups_smryJul22.csv')
heatmap(df)
